{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/myPosts/MyPosts.module.css","components/Profile/myPosts/Post/Post.module.css","components/Profile/Profile.module.css","images/spiderMan.svg","components/Profile/ProfileInfo/ProfileStatusWidthHook.tsx","../node_modules/@material-ui/core/FormGroup/formGroupClasses.js","../node_modules/@material-ui/core/FormGroup/FormGroup.js","components/Profile/ProfileInfo/ProfileFormData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/myPosts/Post/Post.tsx","components/Profile/myPosts/MyPosts.tsx","components/Profile/myPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWidthHook","props","useState","editMode","setEditMode","status","setStatus","useEffect","style","marginBottom","borderBottom","paddingBottom","color","className","statusSpan","onDoubleClick","TextField","size","variant","value","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","getFormGroupUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","FormGroupRoot","styled","name","overridesResolver","styles","ownerState","root","row","_extends","display","flexDirection","flexWrap","FormGroup","React","inProps","ref","useThemeProps","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","ProfileDataForm","formik","useFormik","initialValues","fullName","profile","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","validate","values","errors","onSubmit","handleSubmit","width","id","placeholder","getFieldProps","required","touched","fontSize","FormControlLabel","handleChange","control","Checkbox","checked","label","Object","keys","map","key","contact","Button","type","marginTop","ProfileBlock","profileBlock","mainTextKey","contactTitle","contactValue","isOwner","justifyContent","alignItems","padding","onClick","goToEditMode","Contact","text","ProfileInfo","CircularProgress","containerProfileData","Paper","elevation","wrapper","photo","imageProfile","src","photos","large","image","alt","upload","component","target","files","length","savePhoto","hidden","info","getStatusProfile","saveProfile","Post","item","messagePost","message","likeType","likeCount","MyPosts","memo","postsElements","profilePage","post","containerPost","addPost","posts","AddNewPost","newPostText","resetForm","wrapperAddPost","addTextField","sx","height","connect","state","postData","Profile","s","profileContainer","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getCurrenUsersProfile","console","error","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.432407b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerProfileData\":\"ProfileInfo_containerProfileData__68FTS\",\"wrapper\":\"ProfileInfo_wrapper__1Dzq6\",\"imageProfile\":\"ProfileInfo_imageProfile__2MyQj\",\"photo\":\"ProfileInfo_photo__1Vc7o\",\"upload\":\"ProfileInfo_upload__1k7q7\",\"info\":\"ProfileInfo_info__3mtFf\",\"statusSpan\":\"ProfileInfo_statusSpan__cBc0f\",\"contact\":\"ProfileInfo_contact__38FQr\",\"text\":\"ProfileInfo_text__QDMNv\",\"profileBlock\":\"ProfileInfo_profileBlock__2UmKr\",\"mainTextKey\":\"ProfileInfo_mainTextKey__1JZSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerPost\":\"MyPosts_containerPost__3J2fx\",\"addPost\":\"MyPosts_addPost__1a0lb\",\"wrapperAddPost\":\"MyPosts_wrapperAddPost__1K_TO\",\"addTextField\":\"MyPosts_addTextField__wjdck\",\"posts\":\"MyPosts_posts__1mE3T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2m7gm\",\"messagePost\":\"Post_messagePost__3Fd09\",\"countLike\":\"Post_countLike__2dhqZ\",\"likeType\":\"Post_likeType__diz1u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Profile_img__1eeBw\",\"profileContainer\":\"Profile_profileContainer__3Gmik\"};","export default __webpack_public_path__ + \"static/media/spiderMan.b4c43d70.svg\";","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport style from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    getStatusProfile: (userId: number | null) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWidthHook = (props:ProfileStatusPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onBlurEditMode = () => {\r\n       setEditMode(false)\r\n\r\n        props.updateStatus(status)\r\n    }\r\n\r\n   const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            {!editMode &&\r\n            <div style={{marginBottom:\"10px\", borderBottom:\"3px solid orange\" ,paddingBottom:\"10px\"}}>\r\n                       <b style={{color:\"darkorange\"}}>Status:</b> <span className={style.statusSpan} onDoubleClick={activateEditMode}>\r\n                        {props.status || \"Add status\"}\r\n                        </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n                 <div>\r\n                    <TextField color={\"warning\"} size={\"small\"} variant={\"standard\"} value={status} onChange={onStatusChange} autoFocus={true} onBlur={onBlurEditMode} />\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}","import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nexport function getFormGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiFormGroup', slot);\n}\nconst formGroupClasses = generateUtilityClasses('MuiFormGroup', ['root', 'row']);\nexport default formGroupClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"row\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getFormGroupUtilityClass } from './formGroupClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    row\n  } = ownerState;\n  const slots = {\n    root: ['root', row && 'row']\n  };\n  return composeClasses(slots, getFormGroupUtilityClass, classes);\n};\n\nconst FormGroupRoot = styled('div', {\n  name: 'MuiFormGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.row && styles.row];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  flexDirection: 'column',\n  flexWrap: 'wrap'\n}, ownerState.row && {\n  flexDirection: 'row'\n}));\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\n\nconst FormGroup = /*#__PURE__*/React.forwardRef(function FormGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormGroup'\n  });\n\n  const {\n    className,\n    row = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    row\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormGroupRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display group of elements in a compact row.\n   * @default false\n   */\n  row: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default FormGroup;","import React from \"react\";\r\nimport {Button, Checkbox, FormControlLabel, FormGroup} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport style from './ProfileInfo.module.css'\r\n\r\ntype FormikErrorType = {\r\n    fullName?: string\r\n    lookingForAJobDescription?: string\r\n    aboutMe?: string\r\n}\r\n\r\n\r\nexport const ProfileDataForm = (props: any) => {\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: props.profile.fullName,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            aboutMe: props.profile.aboutMe,\r\n            contacts: {\r\n                facebook: props.profile.contacts.facebook,\r\n                website: props.profile.contacts.website,\r\n                vk: props.profile.contacts.vk,\r\n                twitter: props.profile.contacts.twitter,\r\n                instagram: props.profile.contacts.instagram,\r\n                youtube: props.profile.contacts.youtube,\r\n                github: props.profile.contacts.github,\r\n                mainLink: props.profile.contacts.mainLink,\r\n            }\r\n\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.fullName || !values.lookingForAJobDescription || !values.aboutMe) {\r\n                errors.fullName = 'Required field';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            props.onSubmit(values)\r\n        },\r\n    });\r\n    return (\r\n        <>\r\n            <div>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <div>\r\n                            <div style={{display: \"flex\", flexDirection: \"column\", width: \"40%\"}}>\r\n                                <b>Full name:</b> <input id={\"fullName\"} placeholder={\"Full name\"}\r\n                                                         {...formik.getFieldProps(\"fullName\")}\r\n                                                         required/>\r\n                                {formik.touched.fullName && formik.errors.fullName ?\r\n                                    <div style={{color: \"red\", fontSize: \"10px\"}}>{formik.errors.fullName}</div> : null}\r\n                            </div>\r\n                            <div>\r\n                                <b>Looking for a job:</b> <FormControlLabel onChange={formik.handleChange}\r\n                                                                            control={<Checkbox {...formik.getFieldProps(\"lookingForAJob\")}\r\n                                                                                               checked={formik.values.lookingForAJob}/>} label=\"\"/>\r\n\r\n                            </div>\r\n                            <div style={{display: \"flex\", flexDirection: \"column\", width: \"40%\"}}>\r\n                                <b>My professional skills:</b> <textarea\r\n                                placeholder={\"My professional skills\"} {...formik.getFieldProps(\"lookingForAJobDescription\")}/>\r\n                                {formik.touched.fullName && formik.errors.fullName ?\r\n                                    <div style={{color: \"red\", fontSize: \"10px\"}}>{formik.errors.fullName}</div> : null}\r\n                            </div>\r\n                            <div style={{display: \"flex\", flexDirection: \"column\", width: \"40%\"}}>\r\n                                <b>About me for :</b> <textarea placeholder={\"About me\"} {...formik.getFieldProps(\"aboutMe\")}/>\r\n                                {formik.touched.fullName && formik.errors.fullName ?\r\n                                    <div style={{color: \"red\", fontSize: \"10px\"}}>{formik.errors.fullName}</div> : null}\r\n                            </div>\r\n\r\n                            <div style={{display: \"flex\", flexDirection: \"column\", width: \"30%\"}}>\r\n                                <b>Contacts:</b> {Object.keys(props.profile.contacts).map(key => {\r\n                                return <div key={key} className={style.contact}>\r\n                                    <b>{key}: <input placeholder={key} {...formik.getFieldProps(`contacts.${key}`)}/> </b>\r\n                                </div>\r\n                            })}\r\n                            </div>\r\n                            <Button size={\"small\"} color={\"success\"} type=\"submit\" variant={\"contained\"} style={{marginTop: \"10px\"}}>Save</Button>\r\n                        </div>\r\n                    </FormGroup>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {ContactsType, ProfileType} from \"../../../reducers/profile-reducer\";\r\nimport image from '../../../images/spiderMan.svg'\r\nimport {Button, CircularProgress, Paper} from \"@material-ui/core\";\r\nimport style from './ProfileInfo.module.css'\r\nimport {ProfileStatusWidthHook} from \"./ProfileStatusWidthHook\";\r\nimport {ProfileDataForm} from \"./ProfileFormData\";\r\nimport ErrorSnackbars from \"../../common/errorSnackbar\";\r\n\r\ntype ProfileInfoComponentType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    savePhoto: (file: File) => void\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    saveProfile: (profile: ProfileType) => void\r\n    getStatusProfile: (userId: number | null) => void\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoComponentType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n\r\n    if (!props.profile) {\r\n        return <CircularProgress color={\"success\"}/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (value: ProfileType) => {\r\n        props.saveProfile(value)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className={style.containerProfileData}>\r\n                    <Paper elevation={5} className={style.wrapper}>\r\n                        <div className={style.photo}>\r\n                            <img className={style.imageProfile} src={props.profile?.photos.large || image} alt={\"Images profile\"}/>\r\n                            <div className={style.upload}>\r\n                                {props.isOwner &&\r\n                                <Button\r\n                                    color={\"warning\"}\r\n                                    size={\"small\"}\r\n                                    variant={\"outlined\"}\r\n                                    component=\"label\"\r\n                                >\r\n                                    Edit photo\r\n                                    <input\r\n                                        onChange={onMainPhotoSelected}\r\n                                        type=\"file\"\r\n                                        hidden\r\n                                    />\r\n                                </Button>}\r\n                            </div>\r\n                        </div>\r\n                        <div className={style.info}>\r\n                            <ErrorSnackbars/>\r\n                            <ProfileStatusWidthHook status={props.status} updateStatus={props.updateStatus} getStatusProfile={props.getStatusProfile}/>\r\n                            {editMode\r\n                                ? <ProfileDataForm profile={props.profile} onSubmit={onSubmit}/>\r\n                                : <ProfileBlock  profile={props.profile} isOwner={props.isOwner} goToEditMode={() => setEditMode(true)}/>\r\n                            }\r\n                        </div>\r\n                    </Paper>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileBlockType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileBlock = (props: ProfileBlockType) => {\r\n    return (\r\n        <div className={style.profileBlock}>\r\n            <div>\r\n                <b className={style.mainTextKey}>Full name:</b>\r\n                <span style={{color:\"darkorange\"}}>{props.profile.fullName}</span>\r\n            </div>\r\n            <div>\r\n                <b className={style.mainTextKey}>Looking for a job:</b>\r\n                <span style={{color:\"darkorange\"}}>{props.profile.lookingForAJob ? \"yes\" : \"no\"}</span>\r\n            </div>\r\n            {\r\n                props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b className={style.mainTextKey}>My professional skills:</b>\r\n                    <span style={{color:\"darkorange\"}}>{props.profile.lookingForAJobDescription}</span>\r\n                </div>\r\n            }\r\n            <div>\r\n                <b className={style.mainTextKey}>Contacts:</b> {Object.keys(props.profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n            <div>\r\n                <b className={style.mainTextKey}>About me for :</b>\r\n                <span style={{color:\"darkorange\"}}>{props.profile.aboutMe}</span>\r\n            </div>\r\n            {props.isOwner && <div style={{justifyContent:\"center\",alignItems:\"center\",display:'flex', padding:\"10px\"}}><Button size={\"small\"} color={\"warning\"} variant={\"outlined\"} onClick={props.goToEditMode}>Edit</Button></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue?: string\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={style.contact}>\r\n        <span className={style.text}><b>{contactTitle}</b>:</span>\r\n        <span style={{ color: \"#02988e\"}}>{contactValue}</span>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\n\r\nconst Post = (props: PropsType) => {\r\n    return (\r\n            <div className={style.item}>\r\n                <img src=\"https://bizlit.com.ua/image/data/pictures/YeDYzSR-10apkm4.png\"/>\r\n                <div className={style.messagePost}>\r\n                    {props.message}\r\n                </div>\r\n                <div className={style.likeType}>\r\n                    <span>♥{props.likeCount}</span>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {PostPropsType} from \"./MyPostsContainer\";\r\nimport {Button, Paper, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\n\r\nconst MyPosts = React.memo((props: PostPropsType) => {\r\n    let postsElements = props.profilePage.map(post => <Post message={post.message} likeCount={post.likeCount}/>)\r\n\r\n    let addPost = (values: string) => {\r\n        if (values !== \"\") {\r\n            props.addPost(values)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.containerPost}>\r\n            <Paper elevation={3} className={style.addPost}>\r\n                <AddNewPost onSubmit={addPost}/>\r\n            </Paper>\r\n            <Paper elevation={3} className={style.posts}>\r\n                <div className={style.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPost = ({onSubmit}: { onSubmit: (values: string) => void }) => {\r\n    const post = useFormik({\r\n        initialValues: {\r\n            newPostText: '',\r\n        },\r\n        onSubmit: (values, {resetForm}) => {\r\n            onSubmit(values.newPostText);\r\n            resetForm()\r\n        },\r\n    });\r\n    return (\r\n        <div>\r\n            <form onSubmit={post.handleSubmit}>\r\n                <div className={style.wrapperAddPost}>\r\n                    <TextField\r\n                        className={style.addTextField}\r\n                        size={\"small\"} color={\"success\"}\r\n                        id=\"newPostText\"\r\n                        name=\"newPostText\"\r\n                        label=\"New post...\"\r\n                        value={post.values.newPostText}\r\n                        onChange={post.handleChange}\r\n                    />\r\n                    <Button sx={{height: \"40px\"}} color={\"warning\"} variant={\"contained\"} type=\"submit\">Submit</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default MyPosts;","import {addPost, postDataType} from \"../../../reducers/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../store/store\";\r\n\r\ntype MapStateProfileType = {\r\n    profilePage: Array<postDataType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\nexport type PostPropsType = MapStateProfileType & MapDispatchPropsType\r\nlet mapStateToProps = (state: AppStateType): MapStateProfileType => {\r\n    return {\r\n        profilePage: state.profilePage.postData,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {addPost})(MyPosts)","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../reducers/profile-reducer\";\r\nimport s from './Profile.module.css'\r\n\r\ntype ProfileComponentType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean\r\n    saveProfile: (profile: ProfileType) => void\r\n    getStatusProfile: (userId: number | null) => void\r\n}\r\n\r\nexport const Profile = (props: ProfileComponentType) => {\r\n\r\n    return <div className={s.profileContainer}>\r\n        <ProfileInfo profile={props.profile} saveProfile={props.saveProfile} isOwner={props.isOwner} status={props.status} savePhoto={props.savePhoto}\r\n                     updateStatus={props.updateStatus} getStatusProfile={props.getStatusProfile}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\n","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {getCurrenUsersProfile, getStatusProfile, ProfileType, savePhoto, saveProfile, updateStatus} from \"../../reducers/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\n// type mapStateToPropsType = {\r\n//     profile: ProfileType | null\r\n//     status: string\r\n//     authorizedUserId: number | null\r\n//     isAuth: boolean\r\n// }\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getCurrenUsersProfile: (userId: number | null) => void\r\n    getStatusProfile: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\ntype OwnPropsType = mapDispatchToPropsType & MapPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n        if (!userId) {\r\n            this.props.history.push(\"/login\")\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exist in URL params or in state ('authirizedUserId')\");\r\n        } else {\r\n            this.props.getCurrenUsersProfile(userId)\r\n            this.props.getStatusProfile(userId)\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} isOwner={!this.props.match.params.userId}  savePhoto={this.props.savePhoto} updateStatus={this.props.updateStatus} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getCurrenUsersProfile,savePhoto, getStatusProfile, updateStatus, saveProfile}),\r\n    // withAuthRedirect,\r\n    withRouter,\r\n)(ProfileContainer)"],"sourceRoot":""}